/*
 * Test file generated by chatGPT
 *
 * This file is used to test the BASS audio library functionalities.
 * It plays a shuffled playlist of audio files from a specified folder,
 * with smooth transitions between tracks using volume fading.
 **/

#include "bass.h"
#include <filesystem>
#include <algorithm>
#include <vector>
#include <string>
#include <random>
#include <thread>
#include <chrono>
#include <iostream>

namespace fs = std::filesystem;

std::vector<std::string> getFiles(const std::string& folder) {
    std::vector<std::string> files;
    for (const auto& entry : fs::directory_iterator(folder)) {
        if (entry.path().extension() == ".mp3" || entry.path().extension() == ".wav")
            files.push_back(entry.path().string());
    }
    return files;
}

void fadeVolume(HCHANNEL channel, float start, float end, float duration) {
    const int steps = 20;
    for (int i = 0; i <= steps; ++i) {
        float vol = start + (end - start) * (i / float(steps));
        BASS_ChannelSetAttribute(channel, BASS_ATTRIB_VOL, vol);
        std::this_thread::sleep_for(std::chrono::milliseconds(int(duration * 1000 / steps)));
    }
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <path_to_music_folder>" << std::endl;
        return 1;
    }

    const char* musicFolderPath = argv[1];

    if (!BASS_Init(-1, 44100, 0, nullptr, nullptr)) {
        std::cerr << "Erreur d'initialisation BASS.\n";
        return 1;
    }

    std::vector<std::string> playlist = getFiles(musicFolderPath);
    std::shuffle(playlist.begin(), playlist.end(), std::mt19937{std::random_device{}()});

    size_t currentIndex = 0;
    HSTREAM current = BASS_StreamCreateFile(FALSE, playlist[currentIndex].c_str(), 0, 0, BASS_SAMPLE_LOOP);
    BASS_ChannelSetAttribute(current, BASS_ATTRIB_VOL, 0);
    BASS_ChannelPlay(current, FALSE);
    fadeVolume(current, 0.0f, 1.0f, 2.0f);  // Fade in

    while (true) {
        std::cout << "Playing: " << playlist[currentIndex] << std::endl;

        QWORD length = BASS_ChannelGetLength(current, BASS_POS_BYTE);
        double totalSecs = BASS_ChannelBytes2Seconds(current, length);
        double currentSecs;

        while ((currentSecs = BASS_ChannelBytes2Seconds(current, BASS_ChannelGetPosition(current, BASS_POS_BYTE))) < totalSecs - 5.0) {
            std::this_thread::sleep_for(std::chrono::milliseconds(200));
        }

        currentIndex = (currentIndex + 1) % playlist.size();
        HSTREAM next = BASS_StreamCreateFile(FALSE, playlist[currentIndex].c_str(), 0, 0, BASS_SAMPLE_LOOP);
        BASS_ChannelSetAttribute(next, BASS_ATTRIB_VOL, 0);
        BASS_ChannelPlay(next, FALSE);

        std::thread fadeOutThread(fadeVolume, current, 1.0f, 0.0f, 3.0f);
        std::thread fadeInThread(fadeVolume, next, 0.0f, 1.0f, 3.0f);

        fadeOutThread.join();
        fadeInThread.join();

        BASS_StreamFree(current);
        current = next;
    }

    BASS_Free();
    return 0;
}
